-- SQL - Data Cleaning Project

-- when i clean data i follow these steps:-
-- 1. check for duplicates and remove any
-- 2. standardize data and fix errors
-- 3. Look at null values and see can be fixed/changed
-- 4. remove any columns and rows that are not necessary - few ways

-- here we are staging the main table so i dont edit the raw data. Never edit the raw data!!
SELECT* 
FROM layoffs;

-- the new staging table being craeted. 
CREATE TABLE layoffss_staging 
LIKE layoffss;

-- running the new duplicated data from here.
SELECT* 
FROM layoffss_staging;

-- inserting into the new staging table by copying data from the original. 
INSERT layoffss_staging
SELECT*
FROM layoffss;


-- staring the data cleaning steps 
-- 1. check for duplicates and remove any
SELECT *, 
ROW_NUMBER() OVER(
PARTITION BY company, industry, total_laid_off, percentage_laid_off, `date`)
FROM layoffss_staging;

WITH duplicate_cte AS 
(
SELECT *, 
ROW_NUMBER() OVER(
PARTITION BY company, location, industry, total_laid_off, percentage_laid_off, `date`, stage, country, funds_raised_millions) AS row_num
FROM layoffss_staging
)

SELECT *
FROM duplicate_cte
WHERE row_num > 1;

-- solutions (deleteing rows that are more than 2 is always the easiesr and quickest so im going to do that)
CREATE TABLE `layoffss_staging2` (
  `company` varchar(100) DEFAULT NULL,
  `location` varchar(100) DEFAULT NULL,
  `industry` varchar(100) DEFAULT NULL,
  `total_laid_off` varchar(100) DEFAULT NULL,
  `percentage_laid_off` varchar(100) DEFAULT NULL,
  `date` varchar(100) DEFAULT NULL,
  `stage` varchar(100) DEFAULT NULL,
  `country` varchar(100) DEFAULT NULL,
  `funds_raised_millions` varchar(100) DEFAULT NULL,
  `row_num` INT
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

-- running the new table to check if there are duplicates (there are) 
SELECT * 
FROM layoffss_staging2
WHERE row_num > 1;

-- deleting the duplicstes that we found 
DELETE 
FROM layoffss_staging2
WHERE row_num > 1;

-- inserting values into the table to make sure there are no duplicates 
INSERT INTO layoffss_staging2
SELECT *, 
ROW_NUMBER() OVER(
PARTITION BY company, location, industry, total_laid_off, percentage_laid_off, `date`, stage, country, funds_raised_millions) AS row_num
FROM layoffss_staging;

-- running again to proof check (there are no more duplcates)
SELECT * 
FROM layoffss_staging2;

-- 2. standardize data and fix errors
-- we are going to delete the white spaces and then updated the table 
SELECT company, TRIM(company)
FROM layoffss_staging2;

UPDATE layoffss_staging2
SET company = TRIM(company);

-- we are going to check, remove and update any repetitions of the same industry (repetition in the name etc ) 
-- first checking all present industries. easier to see duplicates.  
SELECT DISTINCT industry 
FROM layoffss_staging2;

SELECT * 
FROM layoffss_staging2
WHERE industry like 'Crypto%';

UPDATE layoffss_staging2
SET industry = 'Crypto'
WHERE industry LIKE 'Crypto%';

-- now we going to use a trick called trailing to remove the fullstop on one of the countries and then update it. 
SELECT DISTINCT country, TRIM(TRAILING '.' FROM country)
FROM layoffss_staging2
ORDER BY 1;

UPDATE layoffss_staging2
SET country = TRIM(TRAILING '.' FROM country)
WHERE country LIKE 'United States%';

-- we are going to change and update the date column into a time series instead of it being a text. sfrom tring date to correct time format date.
SELECT `date`,
STR_TO_DATE(`date`, '%m/%d/%Y')
FROM layoffss_staging2;

UPDATE layoffss_staging2
SET `date` = 
    CASE
        WHEN `date` IS NOT NULL AND `date` != 'NULL' THEN STR_TO_DATE(`date`, '%m/%d/%Y')
        ELSE NULL  
    END;
    
-- now we hare going to change the date column from being text into being the correct data type. 
ALTER TABLE  layoffss_staging2
MODIFY COLUMN `date` DATE; 

-- 3. Look at null values and see what needs to be removed if neccessary
-- i didnt change anything here as there was no need for it as the null values help calculate the EDA 

-- 4. remove any columns and rows if needed that have no values (nulll) 
DELETE 
FROM layoffss_staging2
WHERE total_laid_off IS NULL
AND percentage_laid_off IS NULL;

-- using this to check if the row_num is dropped
SELECT * 
FROM layoffss_staging2; 

-- dropping the row_num column we created ealier as we are done using it now. 
ALTER TABLE layoffss_staging2
DROP column row_num; 

